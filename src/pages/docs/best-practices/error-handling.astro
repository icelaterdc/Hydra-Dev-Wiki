---
import Layout from '../../../layouts/Layout.astro';
import { marked } from 'marked';
import hljs from 'highlight.js';
import 'highlight.js/styles/github-dark.css';

// Marked ayarlarını yapılandırıyoruz: Kod blokları varsa highlight.js ile işlenecek.
marked.setOptions({
  highlight: (code, lang) => {
    if (lang && hljs.getLanguage(lang)) {
      return hljs.highlight(code, { language: lang }).value;
    }
    return hljs.highlightAuto(code).value;
  },
  gfm: true,
  breaks: true,
});

const sections = [
  {
    title: 'Error Types',
    content: `
Common Discord bot errors:
      
1. **API Errors**
   - Rate limits
   - Permission issues
   - Invalid requests
      
2. **Runtime Errors**
   - Command execution failures
   - Database errors
   - Network issues
      
3. **User Errors**
   - Invalid input
   - Missing permissions
   - Command misuse
    `
  },
  {
    title: 'Error Handling Implementation',
    content: `
Implement robust error handling:

\`\`\`javascript
class ErrorHandler {
  constructor() {
    this.errorTypes = {
      DISCORD_API: 'DiscordAPIError',
      DATABASE: 'DatabaseError',
      VALIDATION: 'ValidationError',
      PERMISSION: 'PermissionError'
    };
  }

  async handleError(error, interaction) {
    console.error(\`Error: \${error.message}\`);
    switch(error.name) {
      case this.errorTypes.DISCORD_API:
        await this.handleDiscordError(error, interaction);
        break;
      case this.errorTypes.DATABASE:
        await this.handleDatabaseError(error, interaction);
        break;
      case this.errorTypes.VALIDATION:
        await this.handleValidationError(error, interaction);
        break;
      case this.errorTypes.PERMISSION:
        await this.handlePermissionError(error, interaction);
        break;
      default:
        await this.handleUnknownError(error, interaction);
    }
  }

  async handleDiscordError(error, interaction) {
    if (error.code === 50013) { // Missing Permissions
      await interaction.reply({
        content: 'I don\'t have permission to do that!',
        ephemeral: true
      });
    } else if (error.code === 50001) { // Missing Access
      await interaction.reply({
        content: 'I can\'t access that resource!',
        ephemeral: true
      });
    }
  }

  async handleDatabaseError(error, interaction) {
    await interaction.reply({
      content: 'A database error occurred. Please try again later.',
      ephemeral: true
    });
  }

  async handleValidationError(error, interaction) {
    await interaction.reply({
      content: \`Invalid input: \${error.message}\`,
      ephemeral: true
    });
  }

  async handlePermissionError(error, interaction) {
    await interaction.reply({
      content: 'You don\'t have permission to use this command!',
      ephemeral: true
    });
  }

  async handleUnknownError(error, interaction) {
    await interaction.reply({
      content: 'An unexpected error occurred. Please try again later.',
      ephemeral: true
    });
  }
}
\`\`\`
    `
  },
  {
    title: 'Logging and Monitoring',
    content: `
Set up error logging:

\`\`\`javascript
class ErrorLogger {
  constructor(options = {}) {
    this.webhook = options.webhook;
    this.environment = options.environment || 'development';
  }

  async log(error, context = {}) {
    const errorLog = {
      timestamp: new Date().toISOString(),
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      },
      context: {
        command: context.command,
        user: context.user,
        guild: context.guild
      },
      environment: this.environment
    };

    // Log to console
    console.error(JSON.stringify(errorLog, null, 2));

    // Send to webhook if configured
    if (this.webhook) {
      await this.sendToWebhook(errorLog);
    }
  }

  async sendToWebhook(errorLog) {
    const embed = {
      title: \`Error: \${errorLog.error.name}\`,
      description: errorLog.error.message,
      fields: [
        {
          name: 'Stack Trace',
          value: \`\`\`\${errorLog.error.stack}\`\`\`
        },
        {
          name: 'Context',
          value: JSON.stringify(errorLog.context, null, 2)
        }
      ],
      timestamp: errorLog.timestamp,
      color: 0xFF0000
    };

    await fetch(this.webhook, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ embeds: [embed] })
    });
  }
}
\`\`\`
    `
  }
];
---

<Layout title="Error Handling Best Practices">
  <div class="max-w-4xl mx-auto py-8">
    <h1 class="text-4xl font-bold mb-8">Error Handling</h1>
    
    <div class="space-y-12">
      {sections.map((section, index) => (
        <div class="bg-[#2B2D31] p-6 rounded-lg" key={index}>
          <h2 class="text-2xl font-semibold mb-4">
            <span class="text-[#5865F2] mr-2">{index + 1}.</span>
            {section.title}
          </h2>
          <div class="prose prose-invert max-w-none section-content" set:html={marked(section.content)}></div>
        </div>
      ))}
    </div>
    
    <div class="mt-8 flex justify-between">
      <a 
        href="/docs/best-practices/code-structure" 
        class="bg-[#4F545C] hover:bg-[#686D73] px-6 py-3 rounded-md font-medium transition-colors"
      >
        ← Previous: Code Structure
      </a>
      <a 
        href="/docs/best-practices" 
        class="bg-[#5865F2] hover:bg-[#4752C4] px-6 py-3 rounded-md font-medium transition-colors"
      >
        Back to Best Practices →
      </a>
    </div>
  </div>

  <style>
    .code-container {
      position: relative;
      background-color: #2B2D31;
      border-radius: 8px;
      margin: 1rem 0;
      overflow: auto;
    }
    .code-container pre {
      margin: 0;
      padding: 1rem;
      font-family: 'Source Code Pro', monospace;
      font-size: 0.875rem;
      background: transparent;
    }
    .copy-button {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background: transparent;
      border: none;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.3s;
    }
    .copy-button:hover {
      opacity: 1;
    }
    .copy-icon {
      width: 1.25rem;
      height: 1.25rem;
      fill: #f8f8f2;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const codeBlocks = document.querySelectorAll('.section-content pre');
      codeBlocks.forEach((block) => {
        if (!block.parentElement.classList.contains('code-container')) {
          const container = document.createElement('div');
          container.className = 'code-container';
          block.parentNode.insertBefore(container, block);
          container.appendChild(block);
          
          const button = document.createElement('button');
          button.className = 'copy-button';
          button.innerHTML = `
            <svg class="copy-icon" viewBox="0 0 24 24">
              <path d="M19,21H9a2,2,0,0,1-2-2V7H5V5h4V3h6V5h4V19A2,2,0,0,1,19,21ZM11,5h2V3H11Z"/>
            </svg>
          `;
          container.appendChild(button);
          
          button.addEventListener('click', () => {
            const codeText = block.innerText.trim();
            navigator.clipboard.writeText(codeText).then(() => {
              button.innerHTML = `
                <svg class="copy-icon" viewBox="0 0 24 24">
                  <path d="M9,16.17l-3.88-3.88L4,13.41,9,18.41l12-12L19.59,5l-10.59,10.59Z"/>
                </svg>
              `;
              setTimeout(() => {
                button.innerHTML = `
                  <svg class="copy-icon" viewBox="0 0 24 24">
                    <path d="M19,21H9a2,2,0,0,1-2-2V7H5V5h4V3h6V5h4V19A2,2,0,0,1,19,21ZM11,5h2V3H11Z"/>
                  </svg>
                `;
              }, 2000);
            });
          });
        }
      });
    });
  </script>
</Layout>
