---
import Layout from '../../../layouts/Layout.astro';

const sections = [
  {
    title: 'Error Types',
    content: `
      Common Discord bot errors:
      
      1. **API Errors**
         - Rate limits
         - Permission issues
         - Invalid requests
      
      2. **Runtime Errors**
         - Command execution failures
         - Database errors
         - Network issues
      
      3. **User Errors**
         - Invalid input
         - Missing permissions
         - Command misuse
    `
  },
  {
    title: 'Error Handling Implementation',
    content: `
      Implement robust error handling:

      \`\`\`javascript
      class ErrorHandler {
        constructor() {
          this.errorTypes = {
            DISCORD_API: 'DiscordAPIError',
            DATABASE: 'DatabaseError',
            VALIDATION: 'ValidationError',
            PERMISSION: 'PermissionError'
          };
        }

        async handleError(error, interaction) {
          console.error(\`Error: \${error.message}\`);

          switch(error.name) {
            case this.errorTypes.DISCORD_API:
              await this.handleDiscordError(error, interaction);
              break;
            case this.errorTypes.DATABASE:
              await this.handleDatabaseError(error, interaction);
              break;
            case this.errorTypes.VALIDATION:
              await this.handleValidationError(error, interaction);
              break;
            case this.errorTypes.PERMISSION:
              await this.handlePermissionError(error, interaction);
              break;
            default:
              await this.handleUnknownError(error, interaction);
          }
        }

        async handleDiscordError(error, interaction) {
          if (error.code === 50013) { // Missing Permissions
            await interaction.reply({
              content: 'I don\'t have permission to do that!',
              ephemeral: true
            });
          } else if (error.code === 50001) { // Missing Access
            await interaction.reply({
              content: 'I can\'t access that resource!',
              ephemeral: true
            });
          }
        }

        async handleDatabaseError(error, interaction) {
          await interaction.reply({
            content: 'A database error occurred. Please try again later.',
            ephemeral: true
          });
        }

        async handleValidationError(error, interaction) {
          await interaction.reply({
            content: \`Invalid input: \${error.message}\`,
            ephemeral: true
          });
        }

        async handlePermissionError(error, interaction) {
          await interaction.reply({
            content: 'You don\'t have permission to use this command!',
            ephemeral: true
          });
        }

        async handleUnknownError(error, interaction) {
          await interaction.reply({
            content: 'An unexpected error occurred. Please try again later.',
            ephemeral: true
          });
        }
      }
      \`\`\`
    `
  },
  {
    title: 'Logging and Monitoring',
    content: `
      Set up error logging:

      \`\`\`javascript
      class ErrorLogger {
        constructor(options = {}) {
          this.webhook = options.webhook;
          this.environment = options.environment || 'development';
        }

        async log(error, context = {}) {
          const errorLog = {
            timestamp: new Date().toISOString(),
            error: {
              name: error.name,
              message: error.message,
              stack: error.stack
            },
            context: {
              command: context.command,
              user: context.user,
              guild: context.guild
            },
            environment: this.environment
          };

          // Log to console
          console.error(JSON.stringify(errorLog, null, 2));

          // Send to webhook if configured
          if (this.webhook) {
            await this.sendToWebhook(errorLog);
          }
        }

        async sendToWebhook(errorLog) {
          const embed = {
            title: \`Error: \${errorLog.error.name}\`,
            description: errorLog.error.message,
            fields: [
              {
                name: 'Stack Trace',
                value: \`\`\`\${errorLog.error.stack}\`\`\`\
              },
              {
                name: 'Context',
                value: JSON.stringify(errorLog.context, null, 2)
              }
            ],
            timestamp: errorLog.timestamp,
            color: 0xFF0000
          };

          await fetch(this.webhook, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ embeds: [embed] })
          });
        }
      }
      \`\`\`
    `
  }
];
---

<Layout title="Error Handling Best Practices">
  <div class="max-w-4xl mx-auto py-8">
    <h1 class="text-4xl font-bold mb-8">Error Handling</h1>
    
    <div class="space-y-12">
      {sections.map((section, index) => (
        <div class="bg-[#2B2D31] p-6 rounded-lg">
          <h2 class="text-2xl font-semibold mb-4">
            <span class="text-[#5865F2] mr-2">{index + 1}.</span>
            {section.title}
          </h2>
          <div class="prose prose-invert max-w-none">
            {section.content}
          </div>
        </div>
      ))}
    </div>

    <div class="mt-8 flex justify-between">
      <a 
        href="/docs/best-practices/code-structure" 
        class="bg-[#4F545C] hover:bg-[#686D73] px-6 py-3 rounded-md font-medium transition-colors"
      >
        ← Previous: Code Structure
      </a>
      <a 
        href="/docs/best-practices" 
        class="bg-[#5865F2] hover:bg-[#4752C4] px-6 py-3 rounded-md font-medium transition-colors"
      >
        Back to Best Practices →
      </a>
    </div>
  </div>
</Layout>