---
import Layout from '../../../layouts/Layout.astro';
import { marked } from 'marked';
import hljs from 'highlight.js';
import 'highlight.js/styles/github-dark.css';

// Marked ayarlarını yapılandırıyoruz: Kod blokları varsa highlight.js ile işlenecek.
marked.setOptions({
  highlight: (code, lang) => {
    if (lang && hljs.getLanguage(lang)) {
      return hljs.highlight(code, { language: lang }).value;
    }
    return hljs.highlightAuto(code).value;
  },
  gfm: true,
  breaks: true,
});

const sections = [
  {
    title: 'Monitoring Basics',
    content: `
Essential metrics to monitor:
      
1. **System Metrics**
   - CPU usage
   - Memory usage
   - Network traffic
   - Disk usage
      
2. **Bot Metrics**
   - Command usage
   - Response times
   - Error rates
   - Active servers
    `
  },
  {
    title: 'Implementing Monitoring',
    content: `
Set up basic monitoring:

\`\`\`javascript
class BotMonitor {
  constructor() {
    this.metrics = {
      commands: new Map(),
      errors: [],
      responseTime: []
    };
  }

  trackCommand(command) {
    const count = this.metrics.commands.get(command) || 0;
    this.metrics.commands.set(command, count + 1);
  }

  trackError(error) {
    this.metrics.errors.push({
      timestamp: new Date(),
      error: error.message,
      stack: error.stack
    });
  }

  trackResponseTime(ms) {
    this.metrics.responseTime.push(ms);
  }

  getAverageResponseTime() {
    const times = this.metrics.responseTime;
    return times.reduce((a, b) => a + b, 0) / times.length;
  }
}

// Usage
const monitor = new BotMonitor();

client.on('interactionCreate', async interaction => {
  const start = Date.now();
  try {
    await handleCommand(interaction);
    monitor.trackCommand(interaction.commandName);
  } catch (error) {
    monitor.trackError(error);
  }
  monitor.trackResponseTime(Date.now() - start);
});
\`\`\`
    `
  },
  {
    title: 'Alerting System',
    content: `
Implement alerts for critical issues:

\`\`\`javascript
class AlertSystem {
  constructor(webhook) {
    this.webhook = webhook;
    this.thresholds = {
      responseTime: 1000, // 1 second
      errorRate: 0.05, // 5%
      memory: 0.9 // 90%
    };
  }

  async checkMetrics(monitor) {
    const alerts = [];

    // Check response time
    if (monitor.getAverageResponseTime() > this.thresholds.responseTime) {
      alerts.push('High response time detected');
    }

    // Check error rate
    const errorRate = monitor.metrics.errors.length / monitor.metrics.commands.size;
    if (errorRate > this.thresholds.errorRate) {
      alerts.push('High error rate detected');
    }

    // Send alerts
    if (alerts.length > 0) {
      await this.sendAlert(alerts.join('\\n'));
    }
  }

  async sendAlert(message) {
    await fetch(this.webhook, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ content: message })
    });
  }
}
\`\`\`
    `
  }
];
---

<Layout title="Monitoring Your Discord Bot">
  <div class="max-w-4xl mx-auto py-8">
    <h1 class="text-4xl font-bold mb-8">Monitoring Your Bot</h1>
    
    <div class="space-y-12">
      {sections.map((section, index) => (
        <div class="bg-[#2B2D31] p-6 rounded-lg">
          <h2 class="text-2xl font-semibold mb-4">
            <span class="text-[#5865F2] mr-2">{index + 1}.</span>
            {section.title}
          </h2>
          <!-- Markdown içeriğini marked ile HTML’ye dönüştürüp render ediyoruz -->
          <div class="prose prose-invert max-w-none section-content" set:html={marked(section.content)}></div>
        </div>
      ))}
    </div>
    
    <div class="mt-8 flex justify-between">
      <a 
        href="/docs/deployment/scaling" 
        class="bg-[#4F545C] hover:bg-[#686D73] px-6 py-3 rounded-md font-medium transition-colors"
      >
        ← Previous: Scaling
      </a>
      <a 
        href="/docs/deployment/ci-cd" 
        class="bg-[#5865F2] hover:bg-[#4752C4] px-6 py-3 rounded-md font-medium transition-colors"
      >
        Next: CI/CD →
      </a>
    </div>
  </div>

  <!-- Kod kutusu varsa uygulanacak stil tanımlamaları -->
  <style>
    .code-container {
      position: relative;
      background-color: #2B2D31;
      border-radius: 8px;
      margin: 1rem 0;
      overflow: auto;
    }
    .code-container pre {
      margin: 0;
      padding: 1rem;
      font-family: 'Source Code Pro', monospace;
      font-size: 0.875rem;
      background: transparent;
    }
    .copy-button {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background: transparent;
      border: none;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.3s;
    }
    .copy-button:hover {
      opacity: 1;
    }
    .copy-icon {
      width: 1.25rem;
      height: 1.25rem;
      fill: #f8f8f2;
    }
  </style>

  <!-- JavaScript: Kod bloklarını sarmalayıp kopyalama butonunu ekliyoruz -->
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const codeBlocks = document.querySelectorAll('.section-content pre');
      codeBlocks.forEach((block) => {
        if (!block.parentElement.classList.contains('code-container')) {
          const container = document.createElement('div');
          container.className = 'code-container';
          block.parentNode.insertBefore(container, block);
          container.appendChild(block);
          
          const button = document.createElement('button');
          button.className = 'copy-button';
          button.innerHTML = `
            <svg class="copy-icon" viewBox="0 0 24 24">
              <path d="M19,21H9a2,2,0,0,1-2-2V7H5V5h4V3h6V5h4V19A2,2,0,0,1,19,21ZM11,5h2V3H11Z"/>
            </svg>
          `;
          container.appendChild(button);
          
          button.addEventListener('click', () => {
            const codeText = block.innerText.trim();
            navigator.clipboard.writeText(codeText).then(() => {
              button.innerHTML = `
                <svg class="copy-icon" viewBox="0 0 24 24">
                  <path d="M9,16.17l-3.88-3.88L4,13.41,9,18.41l12-12L19.59,5l-10.59,10.59Z"/>
                </svg>
              `;
              setTimeout(() => {
                button.innerHTML = `
                  <svg class="copy-icon" viewBox="0 0 24 24">
                    <path d="M19,21H9a2,2,0,0,1-2-2V7H5V5h4V3h6V5h4V19A2,2,0,0,1,19,21ZM11,5h2V3H11Z"/>
                  </svg>
                `;
              }, 2000);
            });
          });
        }
      });
    });
  </script>
</Layout>
