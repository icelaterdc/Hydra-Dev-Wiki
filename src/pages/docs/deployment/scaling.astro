---
import Layout from '../../../layouts/Layout.astro';

const sections = [
  {
    title: 'Scaling Strategies',
    content: `
      Learn different approaches to scaling your bot:
      
      1. **Vertical Scaling**
         - Upgrade server resources
         - Optimize memory usage
         - Improve CPU utilization
      
      2. **Horizontal Scaling**
         - Shard your bot
         - Distribute load across servers
         - Use load balancers
      
      3. **Database Scaling**
         - Implement caching
         - Optimize queries
         - Use database clusters
    `
  },
  {
    title: 'Sharding Implementation',
    content: `
      Implement Discord.js sharding:

      \`\`\`javascript
      const { ShardingManager } = require('discord.js');

      const manager = new ShardingManager('./bot.js', {
        token: process.env.TOKEN,
        totalShards: 'auto',
        shardList: 'auto'
      });

      manager.on('shardCreate', shard => {
        console.log(\`Launched shard \${shard.id}\`);
      });

      manager.spawn();
      \`\`\`
    `
  },
  {
    title: 'Load Balancing',
    content: `
      Set up load balancing:

      \`\`\`javascript
      // Implement custom load balancing
      class LoadBalancer {
        constructor(shards) {
          this.shards = shards;
          this.metrics = new Map();
        }

        async getOptimalShard() {
          let lowestLoad = Infinity;
          let optimalShard = null;

          for (const shard of this.shards) {
            const load = await this.getShardLoad(shard);
            if (load < lowestLoad) {
              lowestLoad = load;
              optimalShard = shard;
            }
          }

          return optimalShard;
        }

        async getShardLoad(shard) {
          const guilds = await shard.fetchClientValue('guilds.cache.size');
          const memory = await shard.fetchClientValue('process.memoryUsage().heapUsed');
          return (guilds * 0.5) + (memory / 1024 / 1024);
        }
      }
      \`\`\`
    `
  }
];
---

<Layout title="Scaling Your Discord Bot">
  <div class="max-w-4xl mx-auto py-8">
    <h1 class="text-4xl font-bold mb-8">Scaling Your Bot</h1>
    
    <div class="space-y-12">
      {sections.map((section, index) => (
        <div class="bg-[#2B2D31] p-6 rounded-lg">
          <h2 class="text-2xl font-semibold mb-4">
            <span class="text-[#5865F2] mr-2">{index + 1}.</span>
            {section.title}
          </h2>
          <div class="prose prose-invert max-w-none">
            {section.content}
          </div>
        </div>
      ))}
    </div>

    <div class="mt-8 flex justify-between">
      <a 
        href="/docs/deployment/hosting" 
        class="bg-[#4F545C] hover:bg-[#686D73] px-6 py-3 rounded-md font-medium transition-colors"
      >
        ← Previous: Hosting
      </a>
      <a 
        href="/docs/deployment/monitoring" 
        class="bg-[#5865F2] hover:bg-[#4752C4] px-6 py-3 rounded-md font-medium transition-colors"
      >
        Next: Monitoring →
      </a>
    </div>
  </div>
</Layout>