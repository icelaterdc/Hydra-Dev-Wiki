---
import Layout from '../../../layouts/Layout.astro';

const sections = [
  {
    title: 'Understanding Rate Limits',
    content: `
      Discord implements rate limiting to prevent API abuse:
      
      1. **Global Rate Limits**
         - Apply to your entire bot
         - Reset after a specific time
         - Affect all API requests
      
      2. **Route-Specific Limits**
         - Different endpoints have different limits
         - Some routes have stricter limits
         - Bucket system for tracking
    `
  },
  {
    title: 'Handling Rate Limits',
    content: `
      Implement rate limit handling:

      \`\`\`javascript
      class RateLimitHandler {
        constructor() {
          this.buckets = new Map();
        }

        async handleRequest(route, handler) {
          const bucket = this.getBucket(route);
          
          if (bucket.remaining === 0) {
            const waitTime = bucket.reset - Date.now();
            if (waitTime > 0) {
              await new Promise(resolve => 
                setTimeout(resolve, waitTime));
            }
          }

          try {
            const response = await handler();
            this.updateBucket(route, response.headers);
            return response;
          } catch (error) {
            if (error.status === 429) { // Rate limited
              await this.handleRateLimit(error);
              return this.handleRequest(route, handler);
            }
            throw error;
          }
        }

        getBucket(route) {
          if (!this.buckets.has(route)) {
            this.buckets.set(route, {
              remaining: Infinity,
              reset: 0
            });
          }
          return this.buckets.get(route);
        }

        updateBucket(route, headers) {
          const bucket = this.getBucket(route);
          bucket.remaining = parseInt(headers['x-ratelimit-remaining']);
          bucket.reset = parseInt(headers['x-ratelimit-reset']) * 1000;
        }

        async handleRateLimit(error) {
          const retryAfter = error.headers['retry-after'] * 1000;
          console.warn(\`Rate limited. Waiting \${retryAfter}ms\`);
          await new Promise(resolve => 
            setTimeout(resolve, retryAfter));
        }
      }
      \`\`\`
    `
  },
  {
    title: 'Best Practices',
    content: `
      Follow these best practices to avoid rate limits:

      1. **Implement Caching**
         - Cache frequently used data
         - Reduce API calls
         - Update cache strategically

      2. **Queue System**
         - Queue API requests
         - Process in batches
         - Respect rate limits

      \`\`\`javascript
      class RequestQueue {
        constructor() {
          this.queue = [];
          this.processing = false;
        }

        add(request) {
          return new Promise((resolve, reject) => {
            this.queue.push({ request, resolve, reject });
            if (!this.processing) {
              this.process();
            }
          });
        }

        async process() {
          this.processing = true;
          while (this.queue.length > 0) {
            const { request, resolve, reject } = this.queue.shift();
            try {
              const result = await request();
              resolve(result);
              await new Promise(r => setTimeout(r, 50)); // Rate limit buffer
            } catch (error) {
              reject(error);
            }
          }
          this.processing = false;
        }
      }
      \`\`\`
    `
  }
];
---

<Layout title="Discord API Rate Limits">
  <div class="max-w-4xl mx-auto py-8">
    <h1 class="text-4xl font-bold mb-8">Rate Limits</h1>
    
    <div class="space-y-12">
      {sections.map((section, index) => (
        <div class="bg-[#2B2D31] p-6 rounded-lg">
          <h2 class="text-2xl font-semibold mb-4">
            <span class="text-[#5865F2] mr-2">{index + 1}.</span>
            {section.title}
          </h2>
          <div class="prose prose-invert max-w-none">
            {section.content}
          </div>
        </div>
      ))}
    </div>

    <div class="mt-8 flex justify-between">
      <a 
        href="/docs/api/authentication" 
        class="bg-[#4F545C] hover:bg-[#686D73] px-6 py-3 rounded-md font-medium transition-colors"
      >
        ← Previous: Authentication
      </a>
      <a 
        href="/docs/api/webhooks" 
        class="bg-[#5865F2] hover:bg-[#4752C4] px-6 py-3 rounded-md font-medium transition-colors"
      >
        Next: Webhooks →
      </a>
    </div>
  </div>
</Layout>